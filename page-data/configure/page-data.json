{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/configure","result":{"data":{"doc":{"id":"3696e26e-7899-5325-9855-d30ff79b4a89","title":"","description":null,"excerpt":"Configure Flex Flex integrations are code-less: They only require that you write configuration files for each integration as YAML filesâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"configure-flex\"\n  }, \"Configure Flex\"), mdx(\"p\", null, \"Flex integrations are code-less: They only require that you write configuration files for each integration as YAML files.\"), mdx(\"p\", null, \"Configurations can \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#AddyourFlexconfigurationtointegrations.d\"\n  }), \"go embedded\"), \" in the Infrastructure agent configuration file, or live as stand-alone config files that you can test separately and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#Linktoaseparateconfigurationfile\"\n  }), \"link\"), \" from the main integrations config file. What approach to follow is up to you.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Configurationschema\"\n  }), \"Configuration schema\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Configurationexample\"\n  }), \"Configuration example\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#AddyourFlexconfigurationtointegrations.d\"\n  }), \"Add your Flex configuration to \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"integrations.d\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Linktoaseparateconfigurationfile\"\n  }), \"Link to a separate configuration file\"))), mdx(\"h2\", {\n    \"id\": \"a-nameconfigurationschemaaconfiguration-schema\"\n  }, mdx(\"a\", {\n    name: \"Configurationschema\"\n  }), \"Configuration schema\"), mdx(\"p\", null, \"The following schema describes the overall structure of a Flex configuration.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"+----------------------+\\n| name                 |\\n| global?              |\\n| +--------------+     |\\n| | <properties> |     |   Suffixes:\\n| +--------------|     |       ? optional\\n| custom_attributes?   |       * multiple repetitions \\n| +----------------+   |\\n| | <key>: <value> | * |\\n| +----------------+   |\\n| apis                 |\\n| +---------------+    |\\n| |  name?        |    |\\n| |  event_type?  | *  |\\n| |  <api>        |    |\\n| |  <functions>* |    |\\n| +---------------+    |\\n+----------------------+\\n\")), mdx(\"h3\", {\n    \"id\": \"a-namenameaname\"\n  }, mdx(\"a\", {\n    name: \"name\"\n  }), \"name\"), mdx(\"p\", null, \"The name of the Flex configuration. It should be something short and meaningful.\"), mdx(\"h3\", {\n    \"id\": \"a-nameglobalaglobal\"\n  }, mdx(\"a\", {\n    name: \"global\"\n  }), \"global\"), mdx(\"p\", null, \"Set of global properties that apply to the overall file. The aim of this section is to avoid repeating some values (like URLs or user credentials).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"global:\\n  base_url: http://localhost:9200/\\n  user: elastic\\n  pass: 3l4st1c\\n  headers:\\n    accept: application/json\\n\")), mdx(\"p\", null, \"These are all the possible \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global\"), \" properties:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Property\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"base_url\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Base URL. See \", mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"../apis/url.md#specifying-a-common-base-url-with-base_url\"\n  }), \"specifying a common base URL\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"user\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Username for APIs that require user and password authentication\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"password\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Password for APIs that require user and password authentication\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"pass_phrase\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Pass phrase for encrypte \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"password\"), \" properties\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"proxy\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Proxy URL for APIs whose connections require it\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"timeout\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Timeout for the API connections, in milliseconds\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"headers\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Key-value map of headers for the HTTP/HTTPS connections\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"tls_config\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"TLS configuration. See \", mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"../apis/url.md#configuring-your-https-connections-with-tls_config\"\n  }), \"configuring your HTTPS connections\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ssh_pem_file\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Path to PEM file to enable SSH authentication\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"JMX\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"See \", mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"../experimental/jmx.md\"\n  }), \"JMX\"), \" (experimental)\")))), mdx(\"h3\", {\n    \"id\": \"a-nameapisaapis\"\n  }, mdx(\"a\", {\n    name: \"apis\"\n  }), \"apis\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"apis\"), \" section allows you to define multiple entries for data acquisition and processing. Each entry must have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event_type\"), \", which is used to name the event type in New Relic:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"event_type\"), \" provides a name for each sample, which is used as table name for querying the metrics\\nin the New Relic UI. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"event_type\"), \" usually have names like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MySQLSample\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MyRemoteSample\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FolderSample\"), \", etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"event_type\"), \" is not defined and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"name\"), \" is, the submitted event type is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"name\"), \"\\nwith the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Sample\"), \" prefix concatenated.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"name: FolderSize\"), \" would make Flex to create events named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"event_type: FolderSizeSample\"), \".\")))), mdx(\"p\", null, \"In addition to the fields that define the name of the sample, each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"apis\"), \" entry requires the type of API to parse data from, and, optionally, a list of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../basics/functions.md\"\n  }), \"functions\"), \" for processing the data coming from the API.\"), mdx(\"h3\", {\n    \"id\": \"a-namecacheacache\"\n  }, mdx(\"a\", {\n    name: \"Cache\"\n  }), \"Cache\"), mdx(\"p\", null, \"Flex by default stores the result of an API execution in it's internal cache. You can then use this cache as input to another API for further processing.\"), mdx(\"p\", null, \"For example, consider a service that returns the following payload\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"id\\\": \\\"eca0338f4ea31566\\\",\\n    \\\"leaderInfo\\\": {\\n        \\\"leader\\\": \\\"8a69d5f6b7814500\\\",\\n        \\\"startTime\\\": \\\"2014-10-24T13:15:51.186620747-07:00\\\",\\n        \\\"uptime\\\": \\\"10m59.322358947s\\\",\\n        \\\"abc\\\": {\\n            \\\"def\\\": 123,\\n            \\\"hij\\\": 234\\n        }\\n    },\\n    \\\"name\\\": \\\"node3\\\"\\n}\\n\")), mdx(\"p\", null, \"as a result of executing the following \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url\"), \" API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: example\\napis:\\n    - name: someService\\n      url: http://some-service.com/status\\n\")), mdx(\"p\", null, \"As we want to process it in another API, we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache\"), \" function. Note that the cache \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"key\"), \" is the URL because it's an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url\"), \" API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: example\\napis:\\n    - name: status\\n      url: http://some-service.com/status\\n    - name: otherStatus\\n      cache: http://some-service.com/status\\n      strip_keys:\\n          - id\\n          - name\\n\")), mdx(\"p\", null, \"With a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"commands\"), \" API, you should use the name of the API instead:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: example\\napis:\\n    - name: status\\n      commands:\\n          # assume that this file contains the same json payload showed above the beginning\\n          - run: cat /var/some/file\\n    - name: otherStatus\\n      cache: status\\n      strip_keys:\\n          - id\\n          - name\\n\")), mdx(\"h3\", {\n    \"id\": \"a-namecustomattributesacustom-attributes\"\n  }, mdx(\"a\", {\n    name: \"Customattributes\"\n  }), \"Custom attributes\"), mdx(\"p\", null, \"With Flex you can add your own custom attributes to samples. Add any custom attribute using key-value pairs under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global\"), \" directive, and at the API level by declaring an array named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"custom_attributes\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"custom_attributes:\\n  greeting: hello\\n\")), mdx(\"p\", null, \"Custom attributes can be defined nearly anywhere in your configuration. For example, under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api\"), \", or further nested under each command.\\nAttributes defined at the lowest level take precedence.\"), mdx(\"p\", null, \"Custom attributes defined at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global\"), \" level are added to all samples, while custom attributes defined at the API level are added only at the level of the API where they are defined. \"), mdx(\"h3\", {\n    \"id\": \"a-nameenvironmentvariablesaenvironment-variables\"\n  }, mdx(\"a\", {\n    name: \"Environmentvariables\"\n  }), \"Environment variables\"), mdx(\"p\", null, \"You can inject values for environment variables anywhere in a Flex config file. To inject the value for an environment variable, use a double dollar sign before the name of the variable (for example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$$MY_ENVIRONMENT_VAR\"), \").\"), mdx(\"h2\", {\n    \"id\": \"a-nameconfigurationexampleaconfiguration-example\"\n  }, mdx(\"a\", {\n    name: \"Configurationexample\"\n  }), \"Configuration example\"), mdx(\"p\", null, \"Here's an example of a Flex configuration embedded in the main integrations configuration file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"integrations:                                    # OHI configuration starts here  \\n  - name: nri-flex                               # OHI to be executed by the Agent\\n    config:                                      # OHI configuration to be parsed by Flex\\n      # Actual Flex configuration starts here\\n      name: linuxDirectorySize                   # Flex configuration name\\n      apis:                                       \\n        - name: DirectorySize                    # Event type will be DirectorySizeSample\\n          commands:                              # Selecting the API `commands`\\n            - run: du -c $$DIR                   # Running a shell command\\n              split: horizontal                  # Post-processing function: split horizontally\\n              set_header: [dirSizeBytes,dirName] # Names for the headers of the table resulting from split\\n              regex_match: true                  # Splits horizontally matching a regular expression\\n              split_by: (\\\\d+)\\\\s+(.*)             # Captures the regexpes between parentheses as the headers above   \\n\")), mdx(\"h2\", {\n    \"id\": \"a-nameaddyourflexconfigurationtointegrationsdaadd-your-configuration-to-integrationsd\"\n  }, mdx(\"a\", {\n    name: \"AddyourFlexconfigurationtointegrations.d\"\n  }), \"Add your configuration to \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"integrations.d\")), mdx(\"p\", null, \"Since it comes bundled with the Infrastructure agent, Flex's configuration must be stored as YAML in the same folder as the rest of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.newrelic.com/docs/integrations/integrations-sdk/file-specifications/integration-configuration-file-specifications-agent-v180\"\n  }), \"on-host integrations\"), \": \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linux: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/etc/newrelic-infra/integrations.d\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Windows: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"C:\\\\Program Files\\\\New Relic\\\\newrelic-infra\\\\integrations.d\\\\\"))), mdx(\"p\", null, \"The main section of the integrations config file is used by the Infrastructure agent to execute Flex like any other integration; you can add your Flex configuration under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config\"), \". \"), mdx(\"p\", null, \"For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/newrelic-infra/integrations.d/my-flex-config.yml\"), \"  could contain the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"integrations:\\n  - name: nri-flex # We're telling the Infra agent to run Flex\\n    interval: 60s\\n    timeout: 5s\\n    config: # Flex configuration starts here!\\n      name: example\\n      apis:\\n        - event_type: ExampleSample\\n          url: https://my-host:8443/admin/metrics.json\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"On-Host Integration Configuration\"), \": the first five lines are read by the agent to execute the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nri-flex\"), \" binary every 60 seconds, canceling the execution if it lasts more than 5 seconds. Refer to \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.newrelic.com/docs/integrations/integrations-sdk/file-specifications/integration-configuration-file-specifications-agent-v180\"\n  }), \"Integration configuration file specifications\"), \" for more details about the contents of the on-host integrations configuration file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Flex configuration\"), \": contains the actions to be taken using data sources APIs, such as the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"../apis/url.md\"\n  }), \"url\"), \" API.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To get a quick, first picture of a Flex configuration file, you can start following our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../basic-tutorial.md\"\n  }), \"basic, step-by-step tutorial\"), \" or check existing config files under \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../examples\"\n  }), \"/examples\"), \".\")), mdx(\"h2\", {\n    \"id\": \"a-namelinktoaseparateconfigurationfilealink-to-a-separate-configuration-file\"\n  }, mdx(\"a\", {\n    name: \"Linktoaseparateconfigurationfile\"\n  }), \"Link to a separate configuration file\"), mdx(\"p\", null, \"You can store the Flex configuration in a separate YAML file (for example, after \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../development.md\"\n  }), \"developing and testing a config file\"), \") and reference it by replacing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config_template_path\"), \" property, which contains the path of the Flex config file.\"), mdx(\"p\", null, \"This way, the equivalent of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/newrelic-infra/integrations.d/my-flex-config.yml\"), \" from the previous section would contain:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"integrations:\\n  - name: nri-flex\\n    interval: 60s\\n    timeout: 5s\\n    config_template_path: /path/to/flex/integration.yml # Reference to a separate Flex config file\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/path/to/flex/integration.yml\"), \" would contain the contents that previously were inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config\"), \" section:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: example\\napis:\\n  - event_type: ExampleSample\\n    url: https://my-host:8443/admin/metrics.json\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Configure Flex"},{"value":"<a name='Configurationschema'></a>Configuration schema"},{"value":"<a name='name'></a>name"},{"value":"<a name='global'></a>global"},{"value":"<a name='apis'></a>apis"},{"value":"<a name='Cache'></a>Cache"},{"value":"<a name='Customattributes'></a>Custom attributes"},{"value":"<a name='Environmentvariables'></a>Environment variables"},{"value":"<a name='Configurationexample'></a>Configuration example"},{"value":"<a name='AddyourFlexconfigurationtointegrations.d'></a>Add your configuration to integrations.d"},{"value":"<a name='Linktoaseparateconfigurationfile'></a>Link to a separate configuration file"}]}},"pageContext":{"id":"3696e26e-7899-5325-9855-d30ff79b4a89","slug":"/configure","previous":{"id":"0eea9784-8739-5423-be9e-b29ec76df89e","slug":"/basic-tutorial"},"next":null}}}