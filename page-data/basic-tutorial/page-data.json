{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/basic-tutorial","result":{"data":{"doc":{"id":"0eea9784-8739-5423-be9e-b29ec76df89e","title":"","description":null,"excerpt":"Flex step-by-step tutorial Follow this tutorial to get started with Flex! Install the Infrastructure agent Check that Flex is up and runningâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"flex-step-by-step-tutorial\"\n  }, \"Flex step-by-step tutorial\"), mdx(\"p\", null, \"Follow this tutorial to get started with Flex!\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#InstalltheInfrastructureagent\"\n  }), \"Install the Infrastructure agent\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#CheckthatFlexisupandrunning\"\n  }), \"Check that Flex is up and running\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#YourfirstFlexintegration\"\n  }), \"Your first Flex integration\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Howtoaddmoreintegrations\"\n  }), \"How to add more integrations\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Whatsnext\"\n  }), \"What's next?\"))), mdx(\"h2\", {\n    \"id\": \"1-a-nameinstalltheinfrastructureagentainstall-the-infrastructure-agent\"\n  }, \"1. \", mdx(\"a\", {\n    name: \"InstalltheInfrastructureagent\"\n  }), \"Install the Infrastructure agent\"), mdx(\"p\", null, \"Starting from New Relic Infrastructure agent version 1.10.7, Flex comes bundled with the agent. To install the Infrastructure agent, see:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.newrelic.com/docs/infrastructure/install-configure-manage-infrastructure/linux-installation/install-infrastructure-linux-using-package-manager\"\n  }), \"Install Infrastructure for Linux using the package manager\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.newrelic.com/docs/infrastructure/install-configure-manage-infrastructure/windows-installation/install-infrastructure-windows-server-using-msi-installer\"\n  }), \"Install Infrastructure for Windows Server using the MSI installer\"))), mdx(\"p\", null, \"You can \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.newrelic.com/docs/infrastructure/new-relic-infrastructure/configuration/start-stop-restart-check-infrastructure-agent-status\"\n  }), \"start, stop, restart, and check\"), \" the Infrastructure agent from the command line. The agent must run in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.newrelic.com/docs/infrastructure/install-configure-infrastructure/linux-installation/linux-agent-running-modes\"\n  }), \"root/administrator mode\"), \".\"), mdx(\"h2\", {\n    \"id\": \"2-a-namecheckthatflexisupandrunningacheck-that-flex-is-up-and-running\"\n  }, \"2. \", mdx(\"a\", {\n    name: \"CheckthatFlexisupandrunning\"\n  }), \"Check that Flex is up and running\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Navigate to the integrations folder of the Infrastructure agent:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linux: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/etc/newrelic-infra/integrations.d\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Windows: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"C:\\\\Program Files\\\\New Relic\\\\newrelic-infra\\\\integrations.d\\\\\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create the integration configuration file (for example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"integrations.yml\"), \") if it doesn't exist.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add the Flex configuration to the file.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"integrations:\\n  - name: nri-flex\\n    config:\\n      name: just-testing\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you already have an integrations section in the file, add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nri-flex\"), \" to it.\"))), mdx(\"p\", null, \"After a few minutes, go to New Relic and run the following \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.newrelic.com/docs/query-data/nrql-new-relic-query-language\"\n  }), \"NRQL query\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"FROM flexStatusSample SELECT * LIMIT 1\\n\")), mdx(\"p\", null, \"The query should produce a table similar to this:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./img/basic-table.png\",\n    \"alt\": null\n  }))), mdx(\"h2\", {\n    \"id\": \"3-a-nameyourfirstflexintegrationayour-first-flex-integration\"\n  }, \"3. \", mdx(\"a\", {\n    name: \"YourfirstFlexintegration\"\n  }), \"Your first Flex integration\"), mdx(\"p\", null, \"This example shows how to collect disk metrics from file systems not natively supported by New Relic using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"df\"), \" command in Linux.\"), mdx(\"p\", null, \"The goal of Flex is to process the output of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"df\"), \" command, showing the file system and 1-byte blocks, while excluding file systems already supported by the agent. If unsupported file systems are not mounted, remove the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-x\"), \" arguments.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ df -PT -B1 -x tmpfs -x xfs -x vxfs -x btrfs -x ext -x ext2 -x ext3 -x ext4\\nFilesystem     Type         1-blocks         Used    Available Capacity Mounted on\\ndevtmpfs       devtmpfs    246296576            0    246296576       0% /dev\\ngo_src         vboxsf   499963170816 361339486208 138623684608      73% /go/src\\n\")), mdx(\"p\", null, \"We want Flex to convert the above tabular text output into a set of equivalent JSON samples with the following format. Notice that the agent decorates each sample with extra fields:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"event\\\": {\\n    \\\"event_type\\\": \\\"FileSystemSample\\\",\\n    \\\"fs\\\": \\\"go_src\\\",\\n    \\\"fsType\\\": \\\"vboxsf\\\",\\n    \\\"capacityBytes\\\": 499963170816,\\n    \\\"usedBytes\\\": 361345331200,\\n    \\\"availableBytes\\\": 138617839616,\\n    \\\"usedPerc\\\": 73,\\n    \\\"mountedOn\\\": \\\"/go/src\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"First, you need to tell Flex how to perform the above \\\"table text to JSON\\\" transformation by specifying the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Name of the metric: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FileSystem\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Which command to run: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"df -PT -B1 ...\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to split the output table from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"df\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to assign the values to given metric names\")), mdx(\"p\", null, \"This is achieved by placing the content below in the YAML configuration file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"integrations:\\n  - name: nri-flex\\n    config:\\n      name: linuxFileSystemIntegration\\n      apis:\\n        - name: FileSystem\\n          commands:\\n            - run: 'df -PT -B1 -x tmpfs -x xfs -x vxfs -x btrfs -x ext -x ext2 -x ext3 -x ext4'\\n              split: horizontal\\n              split_by: \\\\s+\\n              row_start: 1\\n              set_header: [fs,fsType,capacityBytes,usedBytes,availableBytes,usedPerc,mountedOn]\\n          perc_to_decimal: true\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"apis\"), \" is an array of entries for each sample. Each entry sets a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"name\"), \"for the sample, as well as the commands/procedures to get and process the sample. The first entry in the example is named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FileSystem\"), \", which is used to name the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FileSystemSample\"), \" event.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"commands\"), \" specifies how to get the information from CLI applications:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"run: 'df -PT -B1...\"), \" specifies the command to run.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"split: horizontal\"), \" states that each output line may return a metric.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"split_by\"), \" explains how to split each line in different fields. In this case, we use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\\s+\"), \" regular expression, which tells Flex that any sequence of one or more white spaces is a separator.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"row_start\"), \" specifies that data starts right after the first row (which is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"set_header\"), \" specifies, in order, a matching name for each value of the aforementioned array.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"perc_to_decimal: true\"), \" indicates to convert any percentage string into a decimal value, removing the trailing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"%\"), \" symbol.\")))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Once the Flex config is created, the Infrastructure agent autodetects the new config and begins collecting data.\")), mdx(\"p\", null, \"To check that your new integration is working, execute the following \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.newrelic.com/docs/query-data/nrql-new-relic-query-language\"\n  }), \"NRQL query\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"FROM FileSystemSample SELECT mountedOn, fs, usedBytes, capacityBytes, usedBytes\\n\")), mdx(\"p\", null, \"The query should now produce a table similar to this:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./img/basic-filesystem.png\",\n    \"alt\": null\n  }))), mdx(\"h2\", {\n    \"id\": \"4-a-namehowtoaddmoreintegrationsahow-to-add-more-flex-integrations\"\n  }, \"4. \", mdx(\"a\", {\n    name: \"Howtoaddmoreintegrations\"\n  }), \"How to add more Flex integrations\"), mdx(\"p\", null, \"Stand-alone Flex configurations, like most of our examples, start with the name of the integration and the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/nri-flex/apis/readme.md\"\n  }), \"apis\"), \". For example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: linuxOpenFD\\napis:\\n  - name: linuxOpenFD\\n    commands:\\n      - run: cat /proc/sys/fs/file-nr | awk '{print $1-$2,$3}'\\n        split: horizontal\\n        set_header: [openFD,maxFD]\\n        regex_match: true\\n        split_by: (\\\\d+)\\\\s+(.*)\\n\")), mdx(\"p\", null, \"These stand-alone configurations can be tested by invoking Flex from the command line; this is useful when \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../development.md\"\n  }), \"developing Flex integrations\"), \", since invoking Flex directly doesn't send data to the New Relic platform:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo /var/db/newrelic-infra/newrelic-integrations/bin/nri-flex --verbose --pretty --config_file ./myconfig.yml\\n\")), mdx(\"p\", null, \"To use Flex configurations files with the Infrastructure agent, you need to add some lines at the beginning. For example, if we add the example above to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"integrations.d\"), \" file, we would get the following (notice the indentation):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"integrations:\\n  - name: nri-flex\\n    config:\\n      name: linuxFileSystemIntegration\\n      apis:\\n        - name: FileSystem\\n          commands:\\n            - run: 'df -PT -B1 -x tmpfs -x xfs -x vxfs -x btrfs -x ext -x ext2 -x ext3 -x ext4'\\n              split: horizontal\\n              split_by: \\\\s+\\n              row_start: 1\\n              set_header: [fs,fsType,capacityBytes,usedBytes,availableBytes,usedPerc,mountedOn]\\n          perc_to_decimal: true\\n      name: linuxOpenFD\\n      apis:\\n        - name: linuxOpenFD\\n          commands:\\n            - run: cat /proc/sys/fs/file-nr | awk '{print $1-$2,$3}'\\n              split: horizontal\\n              set_header: [openFD,maxFD]\\n              regex_match: true\\n              split_by: (\\\\d+)\\\\s+(.*)\\n\")), mdx(\"p\", null, \"To insert multiple Flex configurations to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"integrations.d\"), \" config file, you can add multiple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nri-flex\"), \" blocks, each with an embedded Flex config:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"integrations:\\n - name: nri-flex\\n   config:\\n     name: flexName_1\\n     # Flex config goes here\\n - name: nri-flex\\n   config:\\n     name: flexName_2\\n     # Flex config goes here\\n - name: nri-flex\\n   config:\\n     name: flexName_3\\n     # Flex config goes here\\n\")), mdx(\"p\", null, \"To minimize indentation issues, you can link to stand-alone Flex configuration files using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config_template_path\"), \" directive:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"integrations:\\n  - name: nri-flex\\n    config_template_path: /path/to/flex/integration.yml\\n\")), mdx(\"p\", null, \"In the Flex repo you can find more than \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../examples/flexConfigs\"\n  }), \"200 config examples\"), \" of custom integrations. Remember to add them under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config\"), \" in your integrations config file, or link to them using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config_template_path\"), \" statements.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We strongly recommend that you use a YAML linter in your code editor to check for indentation issues in your config files. Most of the times, Flex rejects badly indented configurations.\")), mdx(\"h2\", {\n    \"id\": \"5-a-namewhatsnextawhats-next\"\n  }, \"5. \", mdx(\"a\", {\n    name: \"Whatsnext\"\n  }), \"What's next?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Learn more about the Flex configuration schema in \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/nri-flex/basics/configure.md\"\n  }), \"Configure Flex\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Read about the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/nri-flex/apis/url.md\"\n  }), \"url\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/nri-flex/apis/command.md\"\n  }), \"commands\"), \" APIs and how to create Flex integrations with them.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"See the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/nri-flex/basics/functions.md\"\n  }), \"list of supported functions\"), \" to understand what Flex is capable of.\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Flex step-by-step tutorial"},{"value":"1. <a name='InstalltheInfrastructureagent'></a>Install the Infrastructure agent"},{"value":"2. <a name='CheckthatFlexisupandrunning'></a>Check that Flex is up and running"},{"value":"3. <a name='YourfirstFlexintegration'></a>Your first Flex integration"},{"value":"4. <a name='Howtoaddmoreintegrations'></a>How to add more Flex integrations"},{"value":"5. <a name='Whatsnext'></a>What's next?"}]}},"pageContext":{"id":"0eea9784-8739-5423-be9e-b29ec76df89e","slug":"/basic-tutorial","previous":{"id":"3696e26e-7899-5325-9855-d30ff79b4a89","slug":"/configure"},"next":null}}}