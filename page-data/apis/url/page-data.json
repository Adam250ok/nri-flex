{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/apis/url","result":{"data":{"doc":{"id":"2d2a7ca5-4850-5f8c-95df-0691e76e52fa","title":"","description":null,"excerpt":"url API The  url  API allows you to retrieve information from an HTTP endpoint.  Basic usage Use POST/PUT methods with a body Configure yourâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"url-api\"\n  }, \"url API\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url\"), \" API allows you to retrieve information from an HTTP endpoint. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Basicusage\"\n  }), \"Basic usage\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#UsePOSTPUTmethodswithabody\"\n  }), \"Use POST/PUT methods with a body\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#ConfigureyourHTTPSconnections\"\n  }), \"Configure your HTTPS connections\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#SpecifyacommonbaseURL\"\n  }), \"Specify a common base URL\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#URLwithcacheforlaterprocessing\"\n  }), \"URL with cache for later processing\"))), mdx(\"h2\", {\n    \"id\": \"a-namebasicusageabasic-usage\"\n  }, mdx(\"a\", {\n    name: \"Basicusage\"\n  }), \"Basic usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: example\\napis:\\n  - event_type: ExampleSample\\n    url: http://my-host:8080/admin/metrics.json\\n    headers:\\n      accept: application/json\\n\")), mdx(\"p\", null, \"The above Flex configuration retrieves a JSON file containing a set of metrics from the provided URL. Notice that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url\"), \" key can be followed by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"headers\"), \" section, which allows specifying HTTP headers.\"), mdx(\"h2\", {\n    \"id\": \"a-nameusepostputmethodswithabodyause-postput-methods-with-a-body\"\n  }, mdx(\"a\", {\n    name: \"UsePOSTPUTmethodswithabody\"\n  }), \"Use POST/PUT methods with a body\"), mdx(\"p\", null, \"To specify a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PUT\"), \" request with a body, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"method\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"payload\"), \" properties.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: httpPostExample \\napis: \\n  - name: httpPost\\n    url: https://jsonplaceholder.typicode.com/posts\\n    method: POST\\n    payload: > \\n      {\\\"title\\\": \\\"foo\\\",\\\"body\\\": \\\"bar\\\",\\\"userId\\\": 1}\\n\")), mdx(\"h2\", {\n    \"id\": \"a-nameconfigureyourhttpsconnectionsaconfigure-your-https-connections\"\n  }, mdx(\"a\", {\n    name: \"ConfigureyourHTTPSconnections\"\n  }), \"Configure your HTTPS connections\"), mdx(\"p\", null, \"When using TLS endpoints with self-signed certificates, define a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tls_config\"), \" section with any of the following items:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"enable\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"bool\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" to enable custom TLS configuration. Requires \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ca\"), \" to be defined if enabled.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"insecure_skip_verify\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"bool\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" to skip the verification of TLS certificates.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ca\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"string\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"Empty\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The Certificate Authority PEM certificate, in case your HTTPS endpoint has self-signed certificates.\")))), mdx(\"p\", null, \"###\\xA0TLS configuration example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: example\\napis:\\n  - event_type: ExampleSample\\n    url: https://my-host:8443/admin/metrics.json\\n    headers:\\n      accept: application/json\\n    tls_config:\\n      enable: true\\n      ca: /etc/bundles/my-ca-cert.pem\\n\")), mdx(\"h2\", {\n    \"id\": \"a-namespecifyacommonbaseurlaspecify-a-common-base-url\"\n  }, mdx(\"a\", {\n    name: \"SpecifyacommonbaseURL\"\n  }), \"Specify a common base URL\"), mdx(\"p\", null, \"When you have to query several different URLs, specifying a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"base_url\"), \" under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"global\"), \" can be quite helpful, as it allows you to provide URL path segment in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url\"), \" fields instead of full URLs.\"), mdx(\"h3\", {\n    \"id\": \"base-url-example\"\n  }, \"Base URL example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: consulFlex\\nglobal:\\n    base_url: http://consul-host/v1/\\n    headers:\\n      X-Consul-Token: my-root-consul-token\\napis:\\n  - event_type: ConsulHealthSample\\n    url: health/service/consul\\n  - event_type: ConsulCheckSample\\n    url: health/state/any\\n  - event_type: ConsulMemberSample\\n    url: agent/members\\n\")), mdx(\"h2\", {\n    \"id\": \"a-nameurlwithcacheforlaterprocessingaurl-with-cache-for-later-processing\"\n  }, mdx(\"a\", {\n    name: \"URLwithcacheforlaterprocessing\"\n  }), \"URL with cache for later processing\"), mdx(\"p\", null, \"URL invocations are cached to avoid having to query them repeatedly. Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache\"), \" under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"command\"), \" to read cached data.\"), mdx(\"p\", null, \"In this example, the NGINX status endpoint is invoked, and the output is retrieved from the cache for later processing:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: nginxFlex\\napis:\\n  - name: nginxStub\\n    url: http://127.0.0.1/nginx_status\\n  - name: nginx\\n    event_type: NginxSample\\n    commands:\\n      - cache: http://127.0.0.1/nginx_status\\n        split_output: Active\\n        regex_matches:\\n          - expression: Active connections:\\\\s(\\\\S+)\\n            keys: [net.connectionsActive]\\n          - expression: \\\\s?(\\\\d+)\\\\s(\\\\d+)\\\\s(\\\\d+)\\n            keys: [net.connectionsAcceptedPerSecond, net.handledPerSecond, net.requestsPerSecond]\\n          - expression: Reading:\\\\s(\\\\d+)\\\\s\\\\S+\\\\s(\\\\d+)\\\\s\\\\S+\\\\s(\\\\d+)\\n            keys: [net.connectionsReading, net.connectionsWriting, net.connectionsWaiting]\\n    math:\\n      net.connectionsDroppedPerSecond: ${net.connectionsAcceptedPerSecond} - ${net.handledPerSecond}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"url API"},{"value":"<a name='Basicusage'></a>Basic usage"},{"value":"<a name='UsePOSTPUTmethodswithabody'></a>Use POST/PUT methods with a body"},{"value":"<a name='ConfigureyourHTTPSconnections'></a>Configure your HTTPS connections"},{"value":"<a name='SpecifyacommonbaseURL'></a>Specify a common base URL"},{"value":"Base URL example"},{"value":"<a name='URLwithcacheforlaterprocessing'></a>URL with cache for later processing"}]}},"pageContext":{"id":"2d2a7ca5-4850-5f8c-95df-0691e76e52fa","slug":"/apis/url","previous":{"id":"dcf0c70e-4922-56c0-b716-eb8d8c78e19f","slug":"/apis/commands"},"next":{"id":"bef3ff93-1f18-5557-afa8-f98ad6891355","slug":"/deprecated/jmx"}}}}