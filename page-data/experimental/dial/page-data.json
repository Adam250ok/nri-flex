{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/experimental/dial","result":{"data":{"doc":{"id":"4b0ab7e7-6f32-56e6-8bec-883248e5fd0e","title":"","description":null,"excerpt":"Net dial Disclaimer : this function is bundled as alpha. That means that it is not yet supported by New Relic. Dial is a parameter usedâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"net-dial\"\n  }, \"Net dial\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Disclaimer\"), \": this function is bundled as alpha. That means that it is not yet supported by New Relic.\")), mdx(\"p\", null, \"Dial is a parameter used under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"commands\"), \".\"), mdx(\"p\", null, \"Example of a port test:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: portTestFlex\\napis: \\n  - timeout: 1000 ### default 1000 ms increase if you'd like\\n    commands:\\n    - dial: \\\"google.com:80\\\"\\n\")), mdx(\"p\", null, \"Example of sending a message and processing the output:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\nname: redisFlex\\napis: \\n  - name: redis\\n    commands: \\n      - dial: 127.0.0.1:6379\\n        run: \\\"info\\\\r\\\\n\\\"\\n        split_by: \\\":\\\"\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Net dial"}]}},"pageContext":{"id":"4b0ab7e7-6f32-56e6-8bec-883248e5fd0e","slug":"/experimental/dial","previous":{"id":"079e3c8b-5b49-59e7-98dc-0e6f1601bfcf","slug":"/experimental/functions"},"next":{"id":"bf075272-6e2a-5067-a9ef-3fd85807a475","slug":"/experimental/db"}}}}