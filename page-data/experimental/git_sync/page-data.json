{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/experimental/git_sync","result":{"data":{"doc":{"id":"3126b7ad-019b-5061-abe7-f7af3e0fd25e","title":"","description":null,"excerpt":"Config sync with git Disclaimer : this function is bundled as alpha. That means that it is not yet supported by New Relic. There's severalâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"config-sync-with-git\"\n  }, \"Config sync with git\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Disclaimer\"), \": this function is bundled as alpha. That means that it is not yet supported by New Relic.\")), mdx(\"p\", null, \"There's several methods to dynamically sync integrations with GitHub.\"), mdx(\"h2\", {\n    \"id\": \"cli-flags\"\n  }, \"CLI Flags\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"./nri-flex -verbose -git_user myUser -git_token 13nasdasj13jadf -git_repo https://github.com/myUser/my-config-repo\\n\")), mdx(\"h2\", {\n    \"id\": \"environment-variables\"\n  }, \"Environment Variables\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"GIT_REPO=https://github.com/myUser/my-config-repo\\nGIT_USER=myUser\\nGIT_TOKEN=13nasdasj13jadf\\n\")), mdx(\"h2\", {\n    \"id\": \"setting-in-nri-flex-configyml\"\n  }, \"Setting in nri-flex-config.yml\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"### /etc/newrelic-infra/integrations.d/nri-flex-config.yml\\nintegration_name: com.newrelic.nri-flex\\n\\ninstances:\\n  - name: nri-flex\\n    command: metrics\\n    arguments:\\n      git_repo: https://github.com/userName/repoName\\n      git_user: userName\\n      git_token: abcd\\n      # fargate: true ## default false\\n      # container_discovery: true ## default false\\n      # container_discovery_dir: \\\"anotherDir\\\" default \\\"flexContainerDiscovery\\\" \\n      # config_file: \\\"../myConfigFile.yml\\\" ## default \\\"\\\" - run only a single specific config file\\n      # config_dir: \\\"anotherConfigDir/\\\" ## default \\\"flexConfigs/\\\"\\n      # event_limit: 500 ## default 500\\n      # insights_api_key: abc\\n      # insights_url: https://insights...\\n      # insights_output: output the payload to stdout\\n    # labels:\\n      # owner: cloud\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Config sync with git"},{"value":"CLI Flags"},{"value":"Environment Variables"},{"value":"Setting in nri-flex-config.yml"}]}},"pageContext":{"id":"3126b7ad-019b-5061-abe7-f7af3e0fd25e","slug":"/experimental/git_sync","previous":{"id":"ad8dbc40-de77-52fb-8356-3530eb4d7106","slug":"/deprecated/discovery"},"next":{"id":"4b0ab7e7-6f32-56e6-8bec-883248e5fd0e","slug":"/experimental/dial"}}}}