{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/experimental/functions","result":{"data":{"doc":{"id":"079e3c8b-5b49-59e7-98dc-0e6f1601bfcf","title":"","description":null,"excerpt":"Experimental functions Experimental functions are available for use but currently not recommend for use in production environments (unlessâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"experimental-functions\"\n  }, \"Experimental functions\"), mdx(\"p\", null, \"Experimental functions are available for use but currently not recommend for use in production environments (unless critical for your use case). They are not officially supported by New Relic.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#inherit_attributes\"\n  }), \"inherit_attributes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#metric_parser\"\n  }), \"metric_parser\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#pagination\"\n  }), \"pagination\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#pluck_numbers\"\n  }), \"pluck_numbers\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#rename_samples\"\n  }), \"rename_samples\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#sample_keys\"\n  }), \"sample_keys\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#store_variables\"\n  }), \"store_variables\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#sub_parse\"\n  }), \"sub_parse\"))), mdx(\"h2\", {\n    \"id\": \"inherit_attributes\"\n  }, \"inherit_attributes\"), mdx(\"p\", null, \"When you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start_key\"), \" to start processing a nested payload, you may want to inherit the attributes above it as well. That's what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inherit_attributes\"), \"is for. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \":  only supported when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start_key\"), \" is used.\"), mdx(\"p\", null, \"Consider a service that returns the following payload:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"id\\\": \\\"eca0338f4ea31566\\\",\\n    \\\"leaderInfo\\\": {\\n        \\\"leader\\\": \\\"8a69d5f6b7814500\\\",\\n        \\\"startTime\\\": \\\"2014-10-24T13:15:51.186620747-07:00\\\",\\n        \\\"uptime\\\": \\\"10m59.322358947s\\\",\\n        \\\"abc\\\":{\\n            \\\"def\\\":123,\\n            \\\"hij\\\":234\\n        }\\n    },\\n    \\\"name\\\": \\\"node3\\\"\\n}\\n\")), mdx(\"p\", null, \"You could include the top-level attributes in the sample:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: example\\napis:\\n    - name: someService\\n      url: http://some-service.com/status\\n      start_key: \\n        - leaderInfo>abc\\n\")), mdx(\"p\", null, \"Which would give you a result similar to:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"metrics\\\": [{\\n  \\\"event_type\\\": \\\"someServiceSample\\\",\\n  \\\"id\\\": \\\"eca0338f4ea31566\\\",\\n  \\\"leaderInfo.abc.def\\\": 1,\\n  \\\"leaderInfo.abc.hij\\\": 2,\\n  \\\"leaderInfo.leader\\\": \\\"a8a69d5f6b7814500\\\",\\n  \\\"leaderInfo.startTime\\\": \\\"2014-10-24T13:15:51.186620747-07:00\\\",\\n  \\\"leaderInfo.uptime\\\": \\\"10m59.322358947s\\\",\\n  \\\"name\\\": \\\"node3\\\"\\n}]\\n\")), mdx(\"h2\", {\n    \"id\": \"metric_parser\"\n  }, \"metric_parser\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"metric_parser\"), \" enables setting rates and deltas. It expects an exact match to avoid any conflicts, though the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mode\"), \" attribute can be set as shown below to automatically match multiple keys. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mode\"), \" supports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"regex\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"suffix\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prefix\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contains\"), \" for matching.\"), mdx(\"p\", null, \"Flex automatically attempts to set a namespace as required for your attributes; else you can namespace based on existing attributes or a custom attributes.\"), mdx(\"p\", null, \"See the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"metric_parser\"), \" example below:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: redisFlex\\napis:\\n  - name: redis\\n    commands:\\n      - run: (printf \\\"info\\\\r\\\\n\\\"; sleep 1) | nc 127.0.0.1 6379 # or even ### run: \\\"redis-cli -h 127.0.0.1 -p 6379 info\\\" ### (depends on redis-cli)\\n        split_by: \\\":\\\"\\n    remove_keys: # remove any keys that contain any of the following strings\\n      - human\\n    snake_to_camel: true\\n    perc_to_decimal: true\\n    sub_parse:\\n      - type: prefix\\n        key: db\\n        split_by:\\n          - \\\",\\\"\\n          - \\\"=\\\"\\n    custom_attributes:\\n      myCustomAttr: theValue\\n    metric_parser:\\n      metrics:\\n        totalNetInputBytes: RATE\\n        rate$: RATE\\n      namespace: # you can create a namespace with a custom attribute, or chain together existing attributes, else it will default\\n        # custom_attr: \\\"mySpecialRedisServer\\\"\\n        existing_attr:\\n          - redisVersion\\n          - tcpPort\\n      # mode: regex ### switches metric parser to use a defined mode rather then exact match, options include \\\"regex\\\" ,\\\"suffix\\\", \\\"prefix\\\" & \\\"contains\\\"\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"pagination\"\n  }, \"pagination\"), mdx(\"p\", null, \"See the inline comments on how to use pagination.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\nname: paginationTest\\napis:\\n  - event_type: paginationTest\\n    url: https://reqres.in/api/users?page=${page}&per_page=2\\n    # url: https://reqres.in/api/users?page=${page}&per_page=${limit}\\n    pagination:\\n      page_start: 1 ### select the page to start from\\n      # increment: 10 ### number to increment by // default 1\\n      # page_limit: 2 ### can be used as a page offset place ${limit} into the url\\n      # page_limit_key: per_page ### select a key in the payload to set the page limit / offset\\n      # page_next_key: next_page ### select a key in the payload to set the next page to walk too\\n      # max_pages: 3 ### set max number of pages to walk\\n      # max_pages_key: total_pages ### select a key in the payload to set the max pages to walk\\n      # next_cursor_key: nextCursor ### if using cursor pagination look for this key instead, will get substituted into ${page}\\n      ############################# you will need to also set a ?flex=${page} query parameter for tracking eg. https://reqres.in/api/users?flex=${page}\\n      # next_link_key: nextLink ### look for specified key to navigate to next\\n      ############################# you will need to also set a ?flex=${page} query parameter for tracking eg. https://reqres.in/api/users?flex=${page}\\n      payload_key: data ### select a key in the payload to check if there is still content being returned\\n\")), mdx(\"h2\", {\n    \"id\": \"pluck_numbers\"\n  }, \"pluck_numbers\"), mdx(\"p\", null, \"Retrieves any attribute with a number value and assigns it to another attribute. Any value that contains numbers is automatically plucked out. If no number is found, the value is left as is.\"), mdx(\"p\", null, \"Consider the following payload:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"id\\\": \\\"eca0338f4ea31566\\\",\\n    \\\"leaderInfo\\\": {\\n        \\\"leader\\\": \\\"8a69d5f6b7814500\\\",\\n        \\\"startTime\\\": \\\"2014-10-24T13:15:51.186620747-07:00\\\",\\n        \\\"uptime\\\": \\\"10m59.322358947s\\\",\\n        \\\"abc\\\": {\\n            \\\"def\\\": 123,\\n            \\\"hij\\\": 234\\n        }\\n    },\\n    \\\"name\\\": \\\"node3\\\"\\n}\\n\")), mdx(\"p\", null, \"You could retrieve the values from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"leaderInfo.abc.def\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"leaderInfo.abc.hij\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: squidFlex\\napis:\\n  - name: squidMgrUtilization\\n    commands:\\n      - run: squidclient -v mgr:utilization\\n        split_by: \\\" = \\\"\\n        line_limit: 88 # stop processing at this line as we only care about last 5 minute metrics\\n    pluck_numbers: true # find any numbers within a string and pluck them out\\n    value_parser:\\n      time: \\\"[0-9]+\\\" # use regex to find any time values, and pluck the first found integer out with the value_parser\\n\")), mdx(\"h2\", {\n    \"id\": \"rename_samples\"\n  }, \"rename_samples\"), mdx(\"p\", null, \"Uses a regular expression to rename a sample (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event_type\"), \" attribute) if the current sample has a key that matches. In the example below, if the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db\"), \" key is found, it's renamed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redisDbSample\"), \"; if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmd\"), \" is found, rename to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redisCmdSample\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\nname: redis\\napis:\\n  - name: redis\\n    url: http://127.0.0.1:8887/metrics\\n    prometheus:\\n      enable: true\\n    rename_samples:\\n      db: redisDbSample\\n      cmd: redisCmdSample\\n\")), mdx(\"h2\", {\n    \"id\": \"sample_keys\"\n  }, \"sample_keys\"), mdx(\"p\", null, \"Creates different samples based on a key from a larger object. There can be cases where you can receive a payload where you have subobjects identified by a key (like a map), and you want to extract them as a different sample. You can target a nested key and split them out into samples.\"), mdx(\"p\", null, \"Consider the following payload:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"followers\\\": {\\n        \\\"6e3bd23ae5f1eae0\\\": {\\n            \\\"counts\\\": {\\n                \\\"fail\\\": 0,\\n                \\\"success\\\": 745\\n            },\\n            \\\"latency\\\": {\\n                \\\"average\\\": 0.017039507382550306,\\n                \\\"current\\\": 0.000138,\\n                \\\"maximum\\\": 1.007649,\\n                \\\"minimum\\\": 0,\\n                \\\"standardDeviation\\\": 0.05289178277920594\\n            }\\n        },\\n        \\\"a8266ecf031671f3\\\": {\\n            \\\"counts\\\": {\\n                \\\"fail\\\": 0,\\n                \\\"success\\\": 735\\n            },\\n            \\\"latency\\\": {\\n                \\\"average\\\": 0.012124141496598642,\\n                \\\"current\\\": 0.000559,\\n                \\\"maximum\\\": 0.791547,\\n                \\\"minimum\\\": 0,\\n                \\\"standardDeviation\\\": 0.04187900156583733\\n            }\\n        }\\n    },\\n    \\\"leader\\\": \\\"924e2e83e93f2560\\\"\\n}\\n\")), mdx(\"p\", null, \"You could create samples based on each of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"followers\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: example\\napis:\\n  - name: startKey\\n    url: http//some-service.com/status\\n    sample_keys:\\n      # create samples distinguished by the follower id\\n      followerSample: followers>follower.id\\n\")), mdx(\"h2\", {\n    \"id\": \"store_variables\"\n  }, \"store_variables\"), mdx(\"p\", null, \"Stores variables from any API result that can be accessed anywhere in any subsequent API.\"), mdx(\"p\", null, \"Consider the following payload:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"id\\\": \\\"eca0338f4ea31566\\\",\\n    \\\"leaderInfo\\\": {\\n        \\\"leader\\\": \\\"8a69d5f6b7814500\\\",\\n        \\\"startTime\\\": \\\"2014-10-24T13:15:51.186620747-07:00\\\",\\n        \\\"uptime\\\": \\\"10m59.322358947s\\\",\\n        \\\"abc\\\":{\\n            \\\"def\\\":123,\\n            \\\"hij\\\":234\\n        }\\n    },\\n    \\\"name\\\": \\\"node3\\\"\\n}\\n\")), mdx(\"p\", null, \"You could store the value of key \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" to be used in the next API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"name: example\\napis:\\n  - name: storeVariables\\n    url: http://some-service.com/status\\n    store_variables:\\n      nodeId: id\\n  - name: useVariables\\n    url: http://some-service.com/${var:nodeId}/status\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"---\\nname: dummyFlex\\napis:\\n  - name: todo\\n    url: https://jsonplaceholder.typicode.com/todos/2\\n    store_variables:\\n      storedId: userId ### store the userId from this response into storedId\\n  - name: user\\n    url: https://jsonplaceholder.typicode.com/users/${var:storedId}  ### query the user route with the previously stored userId which is storedId\\n\")), mdx(\"h2\", {\n    \"id\": \"sub_parse\"\n  }, \"sub_parse\"), mdx(\"p\", null, \"Splits nested values out from one line. For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db0:keys=1,expires=0,avg_ttl=0\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db0.keys = 1, db0.expires = 0, db0.avg_ttl = 0\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apis:\\n  - name: redis\\n    commands:\\n      - run: (printf \\\"info\\\\r\\\\n\\\"; sleep 1) | nc -q0 127.0.0.1 6379\\n        split_by: \\\":\\\"\\n    sub_parse:\\n      - type: prefix\\n        key: db\\n        split_by:\\n          - \\\",\\\"\\n          - \\\"=\\\"\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Experimental functions"},{"value":"inherit_attributes"},{"value":"metric_parser"},{"value":"pagination"},{"value":"pluck_numbers"},{"value":"rename_samples"},{"value":"sample_keys"},{"value":"store_variables"},{"value":"sub_parse"}]}},"pageContext":{"id":"079e3c8b-5b49-59e7-98dc-0e6f1601bfcf","slug":"/experimental/functions","previous":{"id":"bef3ff93-1f18-5557-afa8-f98ad6891355","slug":"/deprecated/jmx"},"next":{"id":"4b0ab7e7-6f32-56e6-8bec-883248e5fd0e","slug":"/experimental/dial"}}}}