{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/deprecated/jmx","result":{"data":{"doc":{"id":"bef3ff93-1f18-5557-afa8-f98ad6891355","title":"","description":null,"excerpt":"JMX Queries ⚠️  Note : this is deprecated functionality that is still provided for backwards compatibility. We encourage you to use the…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"jmx-queries\"\n  }, \"JMX Queries\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": this is deprecated functionality that is still provided for backwards compatibility. We encourage you to use the improved, fully-supported \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://github.com/newrelic/nri-jmx\"\n  }), \"nri-jmx On-Host Integration\"), \". \")), mdx(\"p\", null, \"Flex can uses \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://github.com/newrelic/nrjmx\"\n  }), \"nrjmx\"), \" to send JMX requests that can be processed later.\"), mdx(\"h3\", {\n    \"id\": \"jmx-queries-1\"\n  }, \"JMX Queries\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Flex is able to utilise \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/newrelic/nrjmx\"\n  }), \"nrjmx\"), \" to run any JMX queries you need.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A copy of the nrjmx jar file is kept \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/newrelic/nri-flex/tree/master/nrjmx\"\n  }), \"here\"))), mdx(\"h4\", {\n    \"id\": \"install-jmx-on-linux\"\n  }, \"Install JMX On Linux\"), mdx(\"p\", null, \"Below are the steps to install the nrjmx file and .jar manually to enable support for JMX. It is important to substitute the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{desired version}\"), \" below with the version of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nri-flex\"), \" you want to use.\"), mdx(\"h5\", {\n    \"id\": \"steps\"\n  }, \"Steps\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Download the package manually\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/newrelic/nri-flex/releases\"\n  }), \"release\"), \" needed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"curl -L https://github.com/newrelic/nri-flex/releases/download/{desired version}/nri-flex-linux-{desired version}.tar.gz -o nri-flex-linux-{desired version}.tar.gz\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Extract the compressed file\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tar -xvf nri-flex-linux-{desired version}.tar.gz\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use the extracted directory as the working directory\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cd nri-flex-linux-{desired version}\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"install_linux.sh --jmx\"), \" with privileges, typically \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo\"), \", to create files in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/var/db/newrelic-infra\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"(optional) Copy over a JMX configuration to begin monitoring\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nri-flex-linux-{desired version}/examples/flexConfigs/\"), \" folder there are different JMX examples which can be used as a reference\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After copying an example config to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/var/db/newrelic-infra/custom-integrations/flexConfigs/\"), \", edit the file according to your monitoring needs and save the file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Restart the infrastructure agent, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo systemctl restart newrelic-infra\"))))), mdx(\"h4\", {\n    \"id\": \"jmx-options-available-are\"\n  }, \"JMX options available are:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"domain\\nuser\\npass\\nhost\\nport\\nkey_store\\nkey_store_pass\\ntrust_store\\ntrust_store_pass\\n\")), mdx(\"p\", null, \"Below is a simple tomcat example.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"name: tomcatFlex\\nglobal:\\n  jmx:\\n      host: \\\"127.0.0.1\\\"\\n      port: \\\"9001\\\"\\napis:\\n  - name: tomcatThreads\\n    event_type: tomcatThreadSample\\n    ### note \\\"keep_keys\\\" will do the inverse, if you want all metrics remove the keep keys blocks completely\\n    ### otherwise tailor specific keys you would like to keep, this uses regex for filtering\\n    ### this is useful for keeping key metrics\\n    keep_keys: ###\\n      - bean\\n      - maxThreads\\n      - connectionCount\\n    commands:\\n      - run: Catalina:type=ThreadPool,name=*\\n        output: jmx\\n  - name: tomcatRequest\\n    event_type: tomcatRequestSample\\n    keep_keys:\\n      - bean\\n      - bytesSent\\n      - bytesReceived\\n      - errorCount\\n      - requestCount\\n    commands: \\n      - run: Catalina:type=GlobalRequestProcessor,name=*\\n        output: jmx\\n  - name: manager\\n    event_type: tomcatManagerSample\\n    keep_keys:\\n      - bean\\n      - errorCount\\n      - requestCount\\n    commands:\\n      - run: Catalina:type=GlobalRequestProcessor,name=*\\n        output: jmx\\n  - name: datasource\\n    event_type: tomcatDatasourceSample\\n    keep_keys:\\n      - bean\\n      - numActive\\n      - numIdle\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"JMX Queries"},{"value":"JMX Queries"},{"value":"Install JMX On Linux"},{"value":"Steps"},{"value":"JMX options available are:"}]}},"pageContext":{"id":"bef3ff93-1f18-5557-afa8-f98ad6891355","slug":"/deprecated/jmx","previous":{"id":"4ea12139-6fef-58d8-ad6f-0e59cdde04a2","slug":"/functions"},"next":{"id":"3126b7ad-019b-5061-abe7-f7af3e0fd25e","slug":"/experimental/git_sync"}}}}