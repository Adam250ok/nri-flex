{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/development","result":{"data":{"doc":{"id":"b153a4a7-4589-567e-84ff-8c1167b6bae5","title":"","description":null,"excerpt":"Development Development mode allow to run Flex without the Infrastructure agent; this can be useful when developing and testing your configâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"development\"\n  }, \"Development\"), mdx(\"p\", null, \"Development mode allow to run Flex without the Infrastructure agent; this can be useful when developing and testing your config files.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Beforeyoustart\"\n  }), \"Before you start\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Installation\"\n  }), \"Installation\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Standardconfiguration\"\n  }), \"Standard configuration\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Testing\"\n  }), \"Testing\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Compilefromsource\"\n  }), \"Compile from source\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Requirements\"\n  }), \"Requirements\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Setup\"\n  }), \"Setup\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Build\"\n  }), \"Build\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Cross-compiling\"\n  }), \"Cross-compiling\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Packaging\"\n  }), \"Packaging\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#DockerRelated\"\n  }), \"Docker Related\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#OtherUtilityCommands\"\n  }), \"Other Utility Commands\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#Docker\"\n  }), \"Run as a Docker image\"))), mdx(\"h2\", {\n    \"id\": \"1-a-namebeforeyoustartabefore-you-start\"\n  }, \"1. \", mdx(\"a\", {\n    name: \"Beforeyoustart\"\n  }), \"Before you start\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Flex outputs to the terminal/console, so you don't need to send the data to New Relic to see the results of running Flex against you config file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Flex runs everything by default in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"flexConfigs/\"), \" folder, next to the binary file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Browse \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"examples/flexConfigs\"), \" for configuration examples that you can reuse.\")), mdx(\"h2\", {\n    \"id\": \"2-a-nameinstallationainstallation\"\n  }, \"2. \", mdx(\"a\", {\n    name: \"Installation\"\n  }), \"Installation\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Download the latest \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/newrelic/nri-flex/releases\"\n  }), \"release\"), \" for your development platform.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Unpack the file.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./nri-flex -help\"), \" to see all available flags.\")), mdx(\"h2\", {\n    \"id\": \"3-a-namestandardconfigurationastandard-configuration\"\n  }, \"3. \", mdx(\"a\", {\n    name: \"Standardconfiguration\"\n  }), \"Standard configuration\"), mdx(\"p\", null, \"Flex looks for configuration files in a folder named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flexConfigs\"), \" by default.\"), mdx(\"p\", null, \"You can use the following flags to instruct Flex to read configuration files from somewhere else than the default folder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"-config_dir `string` Specifies a directory of configurations files\\n\\n-config_file (or -config_path) `string` Specifies a single config file\\n\")), mdx(\"h2\", {\n    \"id\": \"4-a-nametestingatesting-your-configuration\"\n  }, \"4. \", mdx(\"a\", {\n    name: \"Testing\"\n  }), \"Testing your configuration\"), mdx(\"p\", null, \"Running without any flags defaults to running all configs within \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./flexConfigs\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"./nri-flex\\n\")), mdx(\"p\", null, \"To test a single Flex config file use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-config_file\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"./nri-flex -config_file \\\"examples/flexConfigs/redis-cmd-raw-example.yml\\\"\\n\")), mdx(\"p\", null, \"For additional logging, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-verbose\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"./nri-flex -verbose\\n\")), mdx(\"p\", null, \"Once you've tested your configuration and you're ready to use in production, you can:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add your configuration to the integrations config file in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"integrations.d\"), \".\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"    ```yaml\\n    integrations:                                    # OHI configuration starts here  \\n- name: nri-flex                               # OHI to be executed by the Agent\\n  config:                                      # OHI configuration to be parsed by Flex\\n  # Actual Flex configuration starts here\\n    ```\\n    or\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"config_template_path\"), \" to reference your Flex configuration file from the integrations config file:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"    ```yaml\\n    integrations:\\n - name: nri-flex\\n    interval: 60s\\n    timeout: 5s\\n    config_template_path: /path/to/flex/integration.yml\\n    ```\\n\")))), mdx(\"h2\", {\n    \"id\": \"5-a-namecompilefromsourceacompile-from-source\"\n  }, \"5. \", mdx(\"a\", {\n    name: \"Compilefromsource\"\n  }), \"Compile from source\"), mdx(\"h3\", {\n    \"id\": \"51-a-namerequirementsarequirements\"\n  }, \"5.1. \", mdx(\"a\", {\n    name: \"Requirements\"\n  }), \"Requirements\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go 1.13 or higher\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/golang/dep\"\n  }), \"dep\"), \" - Dependency management tool (if not using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"go mod\"), \", which we advise you to use)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/golangci/golangci-lint\"\n  }), \"golangci-lint v1.22.2\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Docker Compose (for integration tests)\")), mdx(\"h3\", {\n    \"id\": \"52-a-namesetupasetup\"\n  }, \"5.2. \", mdx(\"a\", {\n    name: \"Setup\"\n  }), \"Setup\"), mdx(\"p\", null, \"This assumes that you have a functional Go environment:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"go get github.com/newrelic/nri-flex\\n\\ncd ${GOPATH}/src/github.com/newrelic/nri-flex\\n\\n# Ensure a clean start\\nmake clean\\n\\n# Download all required libraries\\nmake dep\\n\")), mdx(\"h3\", {\n    \"id\": \"53-a-namebuildabuild\"\n  }, \"5.3. \", mdx(\"a\", {\n    name: \"Build\"\n  }), \"Build\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Default command runs clean, linter, unit test, and compiles for the local OS\\nmake\\n\\n# run all tests + linter\\nmake test\\n\\n# run integration tests (requires docker-compose)\\nmake test-integration\\n\\n# run unit tests\\nmake test-unit\\n\\n# run only linter\\nmake lint\\n\\n# Create a coverage report\\nmake cover\\n\\n# Launch the coverage report into a web browser\\nmake cover-view\\n\")), mdx(\"h3\", {\n    \"id\": \"54-a-namecross-compilingacross-compiling\"\n  }, \"5.4. \", mdx(\"a\", {\n    name: \"Cross-compiling\"\n  }), \"Cross-compiling\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Build binary for current OS\\nmake build\\n\\n# Build binaries for all supported OSes\\nmake build-all\\n\\n# Build binaries for a specific OS\\nmake build-darwin\\nmake build-linux\\nmake build-windows\\n\")), mdx(\"h3\", {\n    \"id\": \"55-a-namepackagingapackaging\"\n  }, \"5.5. \", mdx(\"a\", {\n    name: \"Packaging\"\n  }), \"Packaging\"), mdx(\"p\", null, \"To build tar.gz files for distribution:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Create a package for the current OS\\nmake package\\n\\n# Create packages for all supported OSes\\nmake package-all\\n\\n# Create packages for a specific OS\\nmake package-darwin\\nmake package-linux\\nmake package-windows\\n\")), mdx(\"h3\", {\n    \"id\": \"56-a-namedockerrelatedadocker-related\"\n  }, \"5.6. \", mdx(\"a\", {\n    name: \"DockerRelated\"\n  }), \"Docker related\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# clean/remove any docker containers that have been created\\nmake docker-clean\\n\\n# Build a new docker image\\nmake docker-image\\n\\n# Run via docker-compose\\nmake docker-run\\n\\n# Testing within docker\\nmake docker-test\\n\\n# Testing with the Infrastructure Agent within Docker\\nmake docker-test-infra\\n\")), mdx(\"h3\", {\n    \"id\": \"57-a-nameotherutilitycommandsaother-utility-commands\"\n  }, \"5.7. \", mdx(\"a\", {\n    name: \"OtherUtilityCommands\"\n  }), \"Other utility Commands\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Use godocdown to create Markdown documentation for all commands and packages\\n# this is run by default.\\nmake document\\n\")), mdx(\"h2\", {\n    \"id\": \"6-a-namedockerarun-as-a-docker-image\"\n  }, \"6. \", mdx(\"a\", {\n    name: \"Docker\"\n  }), \"Run as a Docker image\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set your configs, modify Dockerfile if need be.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Build and run the image.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# BUILD\\ndocker build -t nri-flex .\\n\\n# RUN - standard\\ndocker run -d --name nri-flex --network=host --cap-add=SYS_PTRACE -v \\\"/:/host:ro\\\" -v \\\"/var/run/docker.sock:/var/run/docker.sock\\\" -e NRIA_LICENSE_KEY=\\\"yourInfraLicenseKey\\\" nri-flex:latest\\n\\n# RUN - with container discovery reverse lookup (ensure -container_discovery is set to true nri-flex-config.yml)\\ndocker run -d --name nri-flex --network=host --cap-add=SYS_PTRACE -l flexDiscoveryRedis=\\\"t=redis,c=redis,tt=img,tm=contains,r=true\\\"  -v \\\"/:/host:ro\\\" -v \\\"/var/run/docker.sock:/var/run/docker.sock\\\" -e NRIA_LICENSE_KEY=\\\"yourInfraLicenseKey\\\" nri-flex:latest\\n\\n# Example: Run Redis with a flex discovery label\\ndocker run -it -p 9696:6379 --label flexDiscoveryRedis=\\\"t=redis,c=redis,tt=img,tm=contains\\\" --name redis-svr -d redis\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Development"},{"value":"1. <a name='Beforeyoustart'></a>Before you start"},{"value":"2. <a name='Installation'></a>Installation"},{"value":"3. <a name='Standardconfiguration'></a>Standard configuration"},{"value":"4. <a name='Testing'></a>Testing your configuration"},{"value":"5. <a name='Compilefromsource'></a>Compile from source"},{"value":"5.1. <a name='Requirements'></a>Requirements"},{"value":"5.2. <a name='Setup'></a>Setup"},{"value":"5.3. <a name='Build'></a>Build"},{"value":"5.4. <a name='Cross-compiling'></a>Cross-compiling"},{"value":"5.5. <a name='Packaging'></a>Packaging"},{"value":"5.6. <a name='DockerRelated'></a>Docker related"},{"value":"5.7. <a name='OtherUtilityCommands'></a>Other utility Commands"},{"value":"6. <a name='Docker'></a>Run as a Docker image"}]}},"pageContext":{"id":"b153a4a7-4589-567e-84ff-8c1167b6bae5","slug":"/development","previous":{"id":"83b307f0-3b44-5ac7-8311-bfe320cf0e63","slug":"/apis"},"next":{"id":"3696e26e-7899-5325-9855-d30ff79b4a89","slug":"/configure"}}}}